#!/bin/bash

ROOT_DIR="$(cd "$(dirname "$0")"; pwd)"
PATH=/sbin:$PATH


do_status() {
	iptables -vL
	echo
	ip6tables -vL
}


do_clear() {
	# Reinitialisation des tables
	iptables -P   INPUT ACCEPT
	iptables -P  OUTPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -F
	iptables -X

	ip6tables -P   INPUT ACCEPT
	ip6tables -P  OUTPUT ACCEPT
	ip6tables -P FORWARD ACCEPT
	ip6tables -F
	ip6tables -X

	# ToDo : Clean chains one by one and keep Docker chain instead of flushing everything and restarting Docker Service
	#service docker   restart ; until iptables -L | grep -q DOCKER;   do sleep 1; done
}


isIpsetInstalled() {
	which ipset &>/dev/null
}


do_start() {

	# Default policies
	###############################################################################

	#IPv4
	iptables -P INPUT   DROP
	iptables -P OUTPUT  DROP
	iptables -P FORWARD DROP

	# IPv6
	ip6tables -P INPUT   DROP
	ip6tables -P OUTPUT  DROP
	ip6tables -P FORWARD DROP


	# Split TCP / UDP / ICMP
	###############################################################################

	# TCP
	iptables -N TCP_IN  ; iptables -m comment --comment "Split TCP   " -i $NTWK_INTFCE -A  INPUT -p tcp -j TCP_IN
	iptables -N TCP_OUT ; iptables -m comment --comment "Split TCP   " -o $NTWK_INTFCE -A OUTPUT -p tcp -j TCP_OUT

	# UDP
	iptables -N UDP_IN  ; iptables -m comment --comment "Split UDP   " -i $NTWK_INTFCE -A  INPUT -p udp -j UDP_IN
	iptables -N UDP_OUT ; iptables -m comment --comment "Split UDP   " -o $NTWK_INTFCE -A OUTPUT -p udp -j UDP_OUT


	# Security
	###############################################################################

	# Scans Xmas and Null
	for chain in TCP_IN FORWARD; do
		iptables -m comment --comment "Scans Xmas and Null" -I $chain 1 -p tcp --tcp-flags FIN,URG,PSH FIN,URG,PSH -j DROP
		iptables -m comment --comment "Scans Xmas and Null" -I $chain 1 -p tcp --tcp-flags ALL ALL                 -j DROP
		iptables -m comment --comment "Scans Xmas and Null" -I $chain 1 -p tcp --tcp-flags ALL NONE                -j DROP
		iptables -m comment --comment "Scans Xmas and Null" -I $chain 1 -p tcp --tcp-flags SYN,RST SYN,RST         -j DROP
	done

	# No broadcast and multicast
	for chain in INPUT FORWARD; do
		iptables -m comment --comment "No broadcast" -I $chain 1 -m pkttype --pkt-type broadcast -j DROP
		iptables -m comment --comment "No multicast" -I $chain 1 -m pkttype --pkt-type multicast -j DROP
	done

	# Blacklist
	isIpsetInstalled && {
		ipset list -n | grep -q blacklist$ || do_blacklist_update
		for chain in INPUT OUTPUT FORWARD; do
			iptables -m comment --comment "BlackList   " -I $chain 1 -m set --match-set blacklist src,dst -j DROP
		done
	}

	# Entrant
	###############################################################################

	# SSH port 443
	if [ -n "$TRUSTED_LST" ] && isIpsetInstalled; then
		ipset create trustedLst -exist hash:net family inet hashsize 16384 maxelem 10; ipset flush trustedLst
		for host in $TRUSTED_LST; do ipset add -exist trustedLst $host; done
		iptables -m comment --comment " IN SSH            " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport   443 -m set --match-set trustedLst src -j ACCEPT
		iptables -m comment --comment " IN SSH            " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport   443 -m set --match-set trustedLst dst -j ACCEPT
	else
		iptables -m comment --comment " IN SSH            " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport   443 -j ACCEPT
		iptables -m comment --comment " IN SSH            " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport   443 -j ACCEPT
	fi


	# Sortant
	###############################################################################

	iptables -m comment --comment "OUT NTP            " -A UDP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p udp --dport  123 -j ACCEPT
	iptables -m comment --comment "OUT NTP            " -A UDP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p udp --sport  123 -j ACCEPT

	iptables -m comment --comment "OUT DNS            " -A UDP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p udp --dport   53 -j ACCEPT
	iptables -m comment --comment "OUT DNS            " -A UDP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p udp --sport   53 -j ACCEPT

	iptables -m comment --comment "OUT HTTP           " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport   80 -j ACCEPT
	iptables -m comment --comment "OUT HTTP           " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport   80 -j ACCEPT

	iptables -m comment --comment "OUT HTTPS          " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport  443 -j ACCEPT
	iptables -m comment --comment "OUT HTTPS          " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport  443 -j ACCEPT

	iptables -m comment --comment "OUT SMTP           " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport   25 -j ACCEPT
	iptables -m comment --comment "OUT SMTP           " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport   25 -j ACCEPT

	iptables -m comment --comment "OUT Whois          " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport   43 -j ACCEPT
	iptables -m comment --comment "OUT Whois          " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport   43 -j ACCEPT
	iptables -m comment --comment "OUT Whois          " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport 4321 -j ACCEPT
	iptables -m comment --comment "OUT Whois          " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport 4321 -j ACCEPT

	iptables -m comment --comment "OUT SSH            " -A TCP_OUT -o $NTWK_INTFCE -m conntrack --ctstate NEW,ESTABLISHED -p tcp --dport   22 -j ACCEPT
	iptables -m comment --comment "OUT SSH            " -A TCP_IN  -i $NTWK_INTFCE -m conntrack --ctstate     ESTABLISHED -p tcp --sport   22 -j ACCEPT

	# ICMP
	###############################################################################

	[ -n "$TRUSTED_ICMP" ] && isIpsetInstalled && {
		ipset create icmp -exist hash:net family inet hashsize 16384 maxelem 10; ipset flush icmp
		for source in $TRUSTED_ICMP; do ipset add -exist icmp $source; done
		iptables -m comment --comment "ICMP        " -i $NTWK_INTFCE -A INPUT  -p icmp -m set --match-set icmp src -j ACCEPT
		iptables -m comment --comment "ICMP        " -o $NTWK_INTFCE -A OUTPUT -p icmp -m set --match-set icmp dst -j ACCEPT
	}

	# Logs
	###############################################################################

	# Depollueurs
	iptables -m comment --comment "NO_LOG_POLLUTION:ICMP" -A INPUT -p icmp -j DROP
	iptables -m comment --comment "NO_LOG_POLLUTION: TCP" -A INPUT -p tcp --match multiport --dports 21:25,80,81,222,443,2222,3306,3389 -j DROP

	# Logs
	iptables -m comment --comment "Logs                 " -A INPUT  -j LOG --log-prefix " [INPUT DROPPED] "
	iptables -m comment --comment "Logs        "              -A OUTPUT -j LOG --log-prefix "[OUTPUT DROPPED] "
}


do_monitor() {
	iptables -Z
	local begin="$(date +%s)"
	while sleep 60; do
		clear
		printf 'Depuis '; date -d "@$(($(date +%s) - $begin))" --utc '+%H:%M'
		iptables -nvL
	done
}


do_blacklist_update() {
	ipset create blacklist -exist hash:net family inet hashsize 16384 maxelem 131072

	[ -r "$ROOT_DIR/blacklist-sources.list" ] && sed 's/#.*//g;/^$/d' "$ROOT_DIR/blacklist-sources.list" | while read src; do
		wget -O- -o/dev/null "$src" | grep -Po '(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?' | sed 's/#.*//g;/^$/d' | sed -r -e '/^(10\.|127\.|172\.16\.|192\.168\.)/d' | xargs -rn1 ipset add -exist blacklist
	done
	[ -r "$ROOT_DIR/blacklist" ] && sed 's/#.*//g;/^$/d' "$ROOT_DIR/blacklist" | xargs -rn1 ipset add -exist blacklist
}


do_blacklist_add() {
	for ip in $@; do
		ipset add -exist blacklist $ip
		grep -q $ip "$ROOT_DIR/blacklist" || echo $ip >>"$ROOT_DIR/blacklist"
	done
}


usage() {
	cat <<EOF
usages:
$0 [ -h | --help ]
$0 [ -f | --file ConfFile ] [ -q | --quiet ] [ --network-interface iface ] [ --trusted-list '@ip [ @ip [ ... ] ]' ] [ --trusted-icmp '@ip [ @ip [ ... ] ]' ] start
$0 stop | status | blupd | monitor
$0 bladd @ip [ @ip [ ... ] ]
EOF
}


###############################################################################
# Main
###############################################################################

# Default options
QUIET=false
NTWK_INTFCE=eth0
TRUSTED_LST=''
TRUSTED_ICMP=''

# Default config file > Default options
[ -r '/etc/default/iptables-init' ] && source '/etc/default/iptables-init'

TEMP="$(getopt --quiet --options hqf: --longoptions help,quiet,file:,network-interface:,trusted-list:,trusted-icmp: -- "$@")"
[ $? == 0 ] || { usage >&2; exit 1; }

# Config file passed in command line > Default config file
eval set -- "$TEMP"
while true; do
	case "$1" in
		-f | --file)
			[ -r "$2" ] || { echo >&2 "$2 n'est pas lisible"; exit 2; }
			source "$2"
			shift 2
			;;
		--) shift ; break  ;;
		*)  shift          ;;
	esac
done

# Settings passed in command line > Config files
eval set -- "$TEMP"
while true; do
	case "$1" in
		-f | --file)                             shift 2 ;;
		--network-interface) NTWK_INTFCE="$2"  ; shift 2 ;;
		--trusted-list)      TRUSTED_LST="$2"  ; shift 2 ;;
		--trusted-icmp)      TRUSTED_ICMP="$2" ; shift 2 ;;
		-q | --quiet)        QUIET=true        ; shift   ;;
		--) shift ; break  ;;
		-h | --help) usage     ; exit 0 ;;
		*)           usage >&2 ; exit 1 ;;
	esac
done

case "$1" in
	blupd)   do_blacklist_update ;;
	status)  do_status           ;;
	monitor) do_monitor          ;;
	stop)    do_clear            ;;
	start)   do_clear; do_start
		$QUIET || {
			do_status
			echo
			echo "La configuration sera annul√©e dans 60 secondes."
			echo "Appuyer sur CTRL-C pour l'appliquer d√©finitivement..."
			sleep 60
			do_clear
		}
		;;
	bladd) shift; do_blacklist_add $@ ;;
	*) usage >&2 ; exit 1 ;;
esac
