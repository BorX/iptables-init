#!/usr/bin/env bash

ROOT_DIR="$(cd "$(dirname "$0")"; pwd)"
PATH=/sbin:$PATH


do_status() {
	iptables -nvL
	echo
	ip6tables -nvL
}


do_clear() {
	# Reinitialisation des tables
	for chain in INPUT OUTPUT FORWARD; do iptables -P $chain ACCEPT; done

#	iptables -F
	# Flush all chains but FORWARD and docker chains
	iptables -nL | sed -n 's/^Chain \([^ ]*\) .*/\1/p' | grep -vi docker | grep -v '^FORWARD$'                   | xargs -rn1 iptables -F
	# Delete all rules in FORWARD but docker rules
	iptables --line-numbers -nvL FORWARD | grep -iv docker | awk 'NR>2{print $1}' | sort -rn                     | xargs -rn1 iptables -D FORWARD 

#	iptables -X
	# Delete all chains but INPUT, OUTPUT, FORWARD and docker chains
	iptables -nL | sed -n 's/^Chain \([^ ]*\) .*/\1/p' | grep -vi docker | grep -vE '^INPUT$|^OUTPUT$|^FORWARD$' | xargs -rn1 iptables -X

	for chain in INPUT OUTPUT FORWARD; do ip6tables -P $chain ACCEPT; done
	ip6tables -F
	ip6tables -X
}


isIpsetInstalled() {
	which ipset &>/dev/null
}


do_start() {

	# Split TCP / UDP
	###############################################################################

	xargs -n1 iptables -N <<<'TCP_IN TCP_OUT UDP_IN UDP_OUT'

	# TCP
	iptables -m comment --comment "Split TCP   " -A  INPUT -p tcp -j TCP_IN
	iptables -m comment --comment "Split TCP   " -A OUTPUT -p tcp -j TCP_OUT

	# UDP
	iptables -m comment --comment "Split UDP   " -A  INPUT -p udp -j UDP_IN
	iptables -m comment --comment "Split UDP   " -A OUTPUT -p udp -j UDP_OUT


	# Rules loading
	###############################################################################

	for addons in "$ROOT_DIR/rules-enabled"/*; do
		source "$addons"
	done


	# ICMP
	###############################################################################

	[ -n "$TRUSTED_ICMP" ] && isIpsetInstalled && {
		ipset create icmp -exist hash:net family inet hashsize 16384 maxelem 10; ipset flush icmp
		for source in $TRUSTED_ICMP; do ipset add -exist icmp $source; done
		iptables -m comment --comment "ICMP        " -i $NTWK_INTFCE -A  INPUT -p icmp -m set --match-set icmp src -j ACCEPT
		iptables -m comment --comment "ICMP        " -o $NTWK_INTFCE -A OUTPUT -p icmp -m set --match-set icmp dst -j ACCEPT
	}


	# Default policies
	###############################################################################

	#IPv4
	iptables -P   INPUT DROP
	iptables -P  OUTPUT DROP
	iptables -P FORWARD DROP

	# IPv6
	ip6tables -P   INPUT DROP
	ip6tables -P  OUTPUT DROP
	ip6tables -P FORWARD DROP
}


do_monitor() {
	iptables -Z
	local begin="$(date +%s)"
	while sleep 60; do
		clear
		printf 'Depuis '; date -d "@$(($(date +%s) - $begin))" --utc '+%H:%M'
		iptables -nvL
	done
}


do_blacklist_update() {
	ipset create blacklist -exist hash:net family inet hashsize 16384 maxelem 262144

	[ -r "$ROOT_DIR/blacklist-sources.list" ] && sed 's/#.*//g;/^$/d' "$ROOT_DIR/blacklist-sources.list" | while read src; do
		wget -O- -o/dev/null "$src" | grep -Po '(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?' | sed 's/#.*//g;/^$/d' | sed -r -e '/^(10\.|127\.|172\.16\.|192\.168\.)/d' | xargs -rn1 ipset add -exist blacklist
	done
	[ -r "$ROOT_DIR/blacklist" ] && sed 's/#.*//g;/^$/d' "$ROOT_DIR/blacklist" | xargs -rn1 ipset add -exist blacklist
}


do_blacklist_update_cron() {
	{ crontab -l ; echo "#00 07 * * * $ROOT_DIR/init blupd"; } | crontab
	crontab -e
}


do_blacklist_add() {
	for ip in $@; do
		ipset add -exist blacklist $ip
		grep -q $ip "$ROOT_DIR/blacklist" || echo $ip >>"$ROOT_DIR/blacklist"
	done
}


usage() {
	cat <<EOF
usages:
$0 [ -h | --help ]
$0 [ -f | --file ConfFile ] [ -q | --quiet ] [ --network-interface iface ] [ --trusted-list '@ip [ @ip [ ... ] ]' ] [ --trusted-icmp '@ip [ @ip [ ... ] ]' ] start
$0 stop | status | blupd | cron | monitor
$0 bladd @ip [ @ip [ ... ] ]
EOF
}


###############################################################################
# Main
###############################################################################

# Default options
QUIET=false
NTWK_INTFCE=eth0
TRUSTED_LST=''
TRUSTED_ICMP=''

# Default config file > Default options
[ -r '/etc/default/iptables-init' ] && source '/etc/default/iptables-init'

TEMP="$(getopt --quiet --options hqf: --longoptions help,quiet,file:,network-interface:,trusted-list:,trusted-icmp: -- "$@")"
[ $? == 0 ] || { usage >&2; exit 1; }

# Config file passed in command line > Default config file
eval set -- "$TEMP"
while true; do
	case "$1" in
		-f | --file)
			[ -r "$2" ] || { echo >&2 "$2 n'est pas lisible"; exit 2; }
			source "$2"
			shift 2
			;;
		--) shift ; break  ;;
		*)  shift          ;;
	esac
done

# Settings passed in command line > Config files
eval set -- "$TEMP"
while true; do
	case "$1" in
		-f | --file)                             shift 2 ;;
		--network-interface) NTWK_INTFCE="$2"  ; shift 2 ;;
		--trusted-list)      TRUSTED_LST="$2"  ; shift 2 ;;
		--trusted-icmp)      TRUSTED_ICMP="$2" ; shift 2 ;;
		-q | --quiet)        QUIET=true        ; shift   ;;
		--) shift ; break  ;;
		-h | --help) usage     ; exit 0 ;;
		*)           usage >&2 ; exit 1 ;;
	esac
done

case "$1" in
	blupd)   do_blacklist_update      ;;
	cron)    do_blacklist_update_cron ;;
	status)  do_status                ;;
	monitor) do_monitor               ;;
	stop)    do_clear                 ;;
	start)   do_clear; do_start
		$QUIET || {
			do_status
			echo
			echo "La configuration sera annulée dans 60 secondes."
			echo "Appuyer sur CTRL-C pour l'appliquer définitivement..."
			sleep 60
			do_clear
		}
		;;
	bladd) shift; do_blacklist_add $@ ;;
	*) usage >&2 ; exit 1 ;;
esac
