#!/bin/bash

TESTING=true

ROOT_DIR="$(cd "$(dirname "$0")"; pwd)"
PATH=/sbin:$PATH


do_status() {
	iptables -vL
	echo
	ip6tables -vL
}


do_clear() {
	# Reinitialisation des tables
	iptables -P   INPUT ACCEPT
	iptables -P  OUTPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -F
	iptables -X

	ip6tables -P   INPUT ACCEPT
	ip6tables -P  OUTPUT ACCEPT
	ip6tables -P FORWARD ACCEPT
	ip6tables -F
	ip6tables -X

	service docker   restart ; until iptables -L | grep -q DOCKER;   do sleep 1; done
}


do_start() {

	# Default policies
	###############################################################################

	#IPv4
	iptables -P INPUT   DROP
	iptables -P OUTPUT  DROP
	iptables -P FORWARD DROP

	# IPv6
	ip6tables -P INPUT   DROP
	ip6tables -P OUTPUT  DROP
	ip6tables -P FORWARD DROP


	# Split TCP / UDP / ICMP
	###############################################################################

	# TCP
	iptables -N TCP_IN  ; iptables -i eth0 -A  INPUT -p tcp -j TCP_IN
	iptables -N TCP_OUT ; iptables -o eth0 -A OUTPUT -p tcp -j TCP_OUT


	# Security
	###############################################################################

	# Scans XMAS and NULL
	for chain in TCP_IN FORWARD; do
		iptables -I $chain 1 -p tcp --tcp-flags FIN,URG,PSH FIN,URG,PSH -j DROP
		iptables -I $chain 1 -p tcp --tcp-flags ALL ALL                 -j DROP
		iptables -I $chain 1 -p tcp --tcp-flags ALL NONE                -j DROP
		iptables -I $chain 1 -p tcp --tcp-flags SYN,RST SYN,RST         -j DROP
	done

	# No broadcast and multicast
	for chain in INPUT FORWARD; do
		iptables -I $chain 1 -m pkttype --pkt-type broadcast -j DROP
		iptables -I $chain 1 -m pkttype --pkt-type multicast -j DROP
	done

	# Blacklist
	ipset list | grep -q blacklist$ || do_blacklist_update
	for chain in INPUT OUTPUT FORWARD; do
		iptables -I $chain 1 -m set --match-set blacklist src,dst -j DROP
	done


	# SSH entrant
	###############################################################################

	iptables -i eth0 -A TCP_IN  -p tcp --dport  22 --source      borx -j ACCEPT
	iptables -o eth0 -A TCP_OUT -p tcp --sport  22 --destination borx -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	ipset create tcp-443 -exist hash:net family inet hashsize 16384 maxelem 65536; ipset flush tcp-443
	for host in prxy1 prxy2 prxy3; do
		ipset add tcp-443 $host
	done
	iptables -i eth0 -A TCP_IN  -p tcp --dport 443 -m set --match-set tcp-443 src -j ACCEPT
	iptables -o eth0 -A TCP_OUT -p tcp --sport 443 -m set --match-set tcp-443 dst -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


	# Sortant
	###############################################################################

	# DNS
	iptables -o eth0 -A OUTPUT -p udp --dport 53 -j ACCEPT
	iptables -i eth0 -A  INPUT -p udp --sport 53 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	# bootps - bootpc
	iptables -o eth0 -A OUTPUT -p udp --source 149.202.56.159 --destination 149.202.56.1   --sport 68 --dport 67 -j ACCEPT
	iptables -i eth0 -A  INPUT -p udp --source 149.202.56.1   --destination 149.202.56.159 --sport 67 --dport 68 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	# HTTP
	iptables -o eth0 -A TCP_OUT -p tcp --dport  80 -j ACCEPT
	iptables -i eth0 -A TCP_IN  -p tcp --sport  80 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	# HTTPS
	iptables -o eth0 -A TCP_OUT -p tcp --dport 443 -j ACCEPT
	iptables -i eth0 -A TCP_IN  -p tcp --sport 443 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	# SMTP
	iptables -o eth0 -A TCP_OUT -p tcp --dport  25 -j ACCEPT
	iptables -i eth0 -A TCP_IN  -p tcp --sport  25 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	# Whois
	iptables -o eth0 -A TCP_OUT -p tcp --dport  43 -j ACCEPT
	iptables -i eth0 -A TCP_IN  -p tcp --sport  43 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

	# SSH
	iptables -o eth0 -A TCP_OUT -p tcp --dport  22 -j ACCEPT
	iptables -i eth0 -A TCP_IN  -p tcp --sport  22 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


	# ICMP - Ping OVH
	###############################################################################

	ipset create icmp -exist hash:net family inet hashsize 16384 maxelem 65536; ipset flush icmp
	for source in 92.222.184.0/24 92.222.185.0/24 92.222.186.0/24 167.114.37.0/24 149.202.34.1/32; do
		ipset add icmp $source
	done
	iptables -i eth0 -A INPUT  -p icmp -m set --match-set icmp src -j ACCEPT
	iptables -o eth0 -A OUTPUT -p icmp -m set --match-set icmp dst -j ACCEPT


#	iptables -A INPUT --source 149.202.34.1 -j DROP
#	iptables -i eth0 -A INPUT -j LOG --log-prefix "[INPUT DROPPED] "
}


do_monitor() {
	iptables -Z
	local begin="$(date +%s)"
	while sleep 60; do
		clear
		printf 'Depuis '; date -d "@$(($(date +%s) - $begin))" --utc '+%H:%M'
		iptables -nvL
	done
}


do_blacklist_update() {
	ipset create blacklist-tmp -exist hash:net family inet hashsize 16384 maxelem 65536

	{
		sed 's/#.*//g;/^$/d' "$ROOT_DIR/blacklist-sources.list" | while read src; do
			wget -O- -o/dev/null "$src" | grep -Po '(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?' | sed 's/#.*//g;/^$/d' | sed -r -e '/^(10\.|127\.|172\.16\.|192\.168\.)/d'
		done
		sed 's/#.*//g;/^$/d' "$ROOT_DIR/blacklist"
	} | sort -u | while read ipaddr; do
	    	ipset add blacklist-tmp $ipaddr
	    done

	ipset create blacklist -exist hash:net family inet hashsize 16384 maxelem 65536
	ipset swap   blacklist blacklist-tmp
	ipset destroy blacklist-tmp
}


do_blacklist_add() {
	for IP in $@; do
		ipset list blacklist | grep -q $IP || ipset add blacklist $IP
		grep -q $IP "$ROOT_DIR/blacklist"  || echo $IP >>"$ROOT_DIR/blacklist"
	done
}


###############################################################################
# Main
###############################################################################


[ "$1" == 'blupd' ] && {
	do_blacklist_update
	exit 0
}

[ "$1" == 'status' ] && {
	do_status
	exit 0
}

[ "$1" == 'monitor' ] && {
  do_monitor
	exit 0
}

[ "$1" == 'stop' ] && {
  do_clear
	exit 0
}


[ "$1" == 'bladd' ] && {
	shift
	do_blacklist_add $@
	exit 0
}

[ "$1" == 'start' ] && {
	do_clear
	do_start

	[ "$2" == 'notest' ] && exit 0
	$TESTING || exit 0

	do_status
	echo
	echo "La configuration sera annulée dans 60 secondes."
	echo "Appuyer sur CTRL-C pour l'appliquer définitivement..."

	sleep 60
	do_clear
}

